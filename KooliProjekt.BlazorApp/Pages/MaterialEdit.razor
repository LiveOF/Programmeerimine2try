@page "/material/create"
@page "/material/edit/{Id:int}"

@inject IApiClient apiClient
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<PageTitle>@(Id == 0 ? "New Material" : "Edit Material")</PageTitle>

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col">
            <h1>@(Id == 0 ? "Create new material" : "Edit material")</h1>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <i class="oi oi-warning me-2"></i> @errorMessage
        </div>
    }

    @if (material != null)
    {
        <EditForm Model="material" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-8">
                    <div class="form-group mb-3">
                        <label for="title">Name</label>
                        <InputText id="title" @bind-Value="material.Title" class="form-control" />
                        <ValidationMessage For="@(() => material.Title)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="description">Description</label>
                        <InputTextArea id="description" @bind-Value="material.Description" class="form-control" rows="3" />
                        <ValidationMessage For="@(() => material.Description)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="unitPrice">Price per unit</label>
                        <InputNumber id="unitPrice" @bind-Value="material.UnitPrice" class="form-control" />
                        <ValidationMessage For="@(() => material.UnitPrice)" />
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="d-flex flex-column gap-2 mt-4">
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <i class="oi oi-check me-2"></i>
                                <span>Save</span>
                            }
                        </button>
                        <a href="/materials" class="btn btn-outline-secondary">
                            <i class="oi oi-x me-2"></i>
                            <span>Cancel</span>
                        </a>
                    </div>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading data...</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Material material;
    private bool isSaving = false;
    private string errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        if (Id > 0)
        {
            var result = await apiClient.GetMaterial(Id);
            if (result.Value != null)
            {
                material = result.Value;
            }
            else
            {
                errorMessage = "Material not found";
                material = new Material();
            }
        }
        else
        {
            material = new Material();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSaving = true;
            errorMessage = null;
            StateHasChanged();

            var result = await apiClient.SaveMaterial(material);

            if (result.HasError)
            {
                errorMessage = "Error when saving the material. Please check the entered data.";
                await JsRuntime.InvokeVoidAsync("console.error", "Save error:", result.Errors);
            }
            else
            {
                NavManager.NavigateTo("/materials");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            await JsRuntime.InvokeVoidAsync("console.error", "Save exception:", ex.Message);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
}
