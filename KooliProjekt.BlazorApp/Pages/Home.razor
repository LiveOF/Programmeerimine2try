@page "/"
@inject IApiClient apiClient
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

<PageTitle>Buildings</PageTitle>

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-md-8">
            <h1>Buildings</h1>
            <p>List of buildings from the database</p>
        </div>
        <div class="col-md-4 d-flex justify-content-end align-items-center gap-2">
            <a class="btn btn-primary" href="/create">
                <i class="oi oi-plus"></i> Add
            </a>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-12">
            @if (buildings == null)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading data...</p>
                </div>
            }
            else if (buildings.Count == 0)
            {
                <div class="alert alert-info">
                    No buildings available. <a href="/create">Add new building</a>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>ID</th>
                                <th>Location</th>
                                <th>Date</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var building in buildings)
                            {
                                <tr>
                                    <td>@building.Id</td>
                                    <td>@building.Location</td>
                                    <td>@building.Date.ToShortDateString()</td>
                                    <td class="text-end">
                                        <div class="btn-group">
                                            <a href="/edit/@building.Id" class="btn btn-sm btn-outline-primary" title="Edit">
                                                <i class="oi oi-pencil"></i> <span class="d-none d-md-inline">Edit</span>
                                            </a>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => Delete(building.Id)" title="Delete">
                                                <i class="oi oi-trash"></i> <span class="d-none d-md-inline">Delete</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div class="toast @(showToast ? "show" : "hide")" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header @toastClass">
            <strong class="me-auto">@toastTitle</strong>
            <button type="button" class="btn-close" @onclick="() => showToast = false"></button>
        </div>
        <div class="toast-body">
            @toastMessage
        </div>
    </div>
</div>

@code {
    private List<Building>? buildings;
    private bool showToast = false;
    private string toastMessage = "";
    private string toastTitle = "";
    private string toastClass = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadBuildings();
    }

    private async Task LoadBuildings()
    {
        try
        {
            var result = await apiClient.List();

            if (result.Value != null)
            {
                buildings = result.Value;
            }
            else
            {
                buildings = new List<Building>();
                ShowError("Failed to load data");
            }
        }
        catch (Exception ex)
        {
            buildings = new List<Building>();
            ShowError($"Error: {ex.Message}");
        }
    }

    private async Task Delete(int id)
    {
        try
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this building?");
            if (!confirmed) return;

            await apiClient.Delete(id);
            ShowSuccess("Building successfully deleted");
            await LoadBuildings();
        }
        catch (Exception ex)
        {
            ShowError($"Delete error: {ex.Message}");
        }
    }

    private void ShowSuccess(string message)
    {
        toastMessage = message;
        toastTitle = "Success";
        toastClass = "bg-success text-white";
        showToast = true;
        StateHasChanged();
    }

    private void ShowError(string message)
    {
        toastMessage = message;
        toastTitle = "Error";
        toastClass = "bg-danger text-white";
        showToast = true;
        StateHasChanged();
    }
}
